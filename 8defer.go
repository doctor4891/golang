//defer - откладывать
package main

import (
	"fmt"
)

func main() {
	/*простой пример отложенного вызова*/
	simpleDefer()

	/*порядок исполнения нескльких отложенных вызовов*/
	stackOfDefers()

	//defer функция расчитывается при ее вызове
	deferEvaluate()

	/*обработка результата функции с помощью defer*/
	changeDefer()
}

func simpleDefer() {
	//отложенный вызов - выполнится вконце, после завершения этой функции
	defer fmt.Println(":-)")

	fmt.Println("Next smile, ")
}

func deferEvaluate() {
	a := 10000
	defer fmt.Println(a)
	a = 1
}

/*певрый зашел - последний вишел*/
func stackOfDefers() {
	for i := 1; i < 10; i++ {
		/*все отложенные вызовы выполнятся в обратном порядке когда завершиться цикл*/
		defer fmt.Println(i)
	}
} /*
9
8
7
6
5
4
3
2
1
*/
/*defer вконце изменяет результат функции*/
func changeDefer() (i int) {
	//в дефер функции видно все переменные в текущей функции
	defer func() {
		i++
		fmt.Println(i) //2
	}()
	return 1
}

//defer нужен чтобы не забыть или иметь возможность выполнить
// то что не выполнится в случае ошибки.
// Например закрыть какой то файл или поток.

//выражение написаное в дефер расчитывается сразу же

//дефер может вконце изменять результат функции
